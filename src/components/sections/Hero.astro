---
import "toastify-js/src/toastify.css";
import Button from "../shared/Button.astro";
import Container from "../shared/Container.astro";
import Paragraph from "../shared/Paragraph.astro";
---

<style>
  .sangria {
    display: block;
    margin-left: 1em; /* Define la cantidad de sangría que deseas */
  }
</style>

<section class="relative pt-32 lg:pt-64">
  <Container className="flex flex-col lg:flex-row gap-10 lg:gap-12">
    <div class="absolute w-full">
      <span
        class="absolute -left-6 md:left-4 top-24 lg:top-28 w-24 h-24 rotate-90 skew-x-12 rounded-3xl bg-green-400 blur-xl opacity-60 lg:opacity-95 lg:block hidden"
      ></span>
      <span
        class="absolute right-4 bottom-12 w-24 h-24 rounded-3xl bg-primary blur-xl opacity-80"
      ></span>
    </div>
    <span
      class="w-4/12 lg:w-2/12 aspect-square bg-gradient-to-tr from-primary to-green-400 absolute -top-5 lg:left-0 rounded-full skew-y-12 blur-2xl opacity-40 skew-x-12 rotate-90"
    ></span>
    <div
      class="relative flex flex-col items-center text-center lg:py-7 xl:py-8 lg:max-w-none max-w-3xl mx-auto lg:mx-0 lg:flex-1 lg:w-1/2"
    >
      <h1
        class="text-4xl/tight sm:text-5xl/tight md:text-5xl/tight xl:text-6xl/tight font-bold text-heading-1"
      >
        Generador de <span
          class="text-transparent bg-clip-text bg-gradient-to-br from-indigo-600 from-20% via-primary via-30% to-green-600"
          >Referencias</span
        > Bibliográficas.
      </h1>
      <Paragraph className="mt-8">
        Genera Referencias con un solo Clic: Introduce el Enlace (URL), Nosotros
        Hacemos el Resto.
      </Paragraph>
      <div class="mt-10 w-full flex max-w-[900px] mx-auto lg:mx-0">
        <div class="flex sm:flex-row flex-col gap-5 w-full">
          <form
            action="#"
            id="sendURL"
            class="py-1 pl-6 w-full pr-1 flex gap-3 items-center text-heading-3 shadow-lg shadow-box-shadow border border-box-border bg-box-bg rounded-full ease-linear focus-within:bg-body focus-within:border-primary"
          >
            <select
              name="format"
              id="format"
              class="w-12 lg:w-[100px] py-3 outline-none bg-transparent text-center"
            >
              <option value="apa">APA</option>
              <option value="harvard1">Harvard</option>
              <option value="nature">Nature</option>
              <option value="modern-language-association-with-url"
                >Modern Language Association 7th edition (with URL)</option
              >
              <option value="chicago-author-date"
                >Chicago Manual of Style 16th edition (author-date)</option
              >
              <option value="vancouver">Vancouver</option>
            </select>
            <span class="min-w-max pr-2 border-r border-box-border">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="icon icon-tabler icon-tabler-link"
                width="20"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M9 15l6 -6"></path>
                <path d="M11 6l.463 -.536a5 5 0 0 1 7.071 7.072l-.534 .464"
                ></path>
                <path
                  d="M13 18l-.397 .534a5.068 5.068 0 0 1 -7.127 0a4.972 4.972 0 0 1 0 -7.071l.524 -.463"
                ></path>
              </svg>
            </span>
            <input
              type="url"
              name="url"
              id="url"
              placeholder="https://example.com"
              class="w-full py-3 outline-none bg-transparent"
            />
            <Button variant="primary" className="min-w-max text-white">
              <span class="hidden sm:flex relative z-[5]">
                Generar Referencia
              </span>
              <span class="flex sm:hidden relative z-[5]">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-5 h-5"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"
                  ></path>
                </svg>
              </span>
            </Button>
          </form>
        </div>
      </div>
    </div>
  </Container>
  <!-- Referencias -->
  <div
    class="tituloReferencias flex items-center justify-center gap-2 text-black dark:text-white mt-6 lg:mt-0"
  >
    <h2 class="text-center text-black dark:text-white font-semibold">
      Lista de Referencias
    </h2>
    <button id="copyButton">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="icon icon-tabler icon-tabler-copy"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <path
          d="M8 8m0 2a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-8a2 2 0 0 1 -2 -2z"
        ></path>
        <path d="M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2"
        ></path>
      </svg>
    </button>
  </div>
  <div
    id="referencias"
    class="w-full flex flex-col-reverse items-center justify-center text-black dark:text-white px-6 sm:px-12 lg:px-24 gap-4 mt-6 transition-all"
  >
  </div>
</section>

<script>
  // TypeScript/JavaScript

  // @ts-ignore
  import Toastify from "toastify-js";

  interface Reference {
    cita: string;
    day: string;
    format: string;
    formatFullname: string;
    time: string;
    url: string;
  }

  const $ = (selector: string) => document.querySelector(selector);

  const references: Reference[] = JSON.parse(
    localStorage.getItem("references") || "[]"
  );

  // Función para renderizar las referencias en el DOM
  function renderReferences() {
    const $references = document.getElementById("referencias");

    if ($references) {
      $references.innerHTML = ""; // Limpiar el contenido actual

      if (references.length > 0) {
        references.forEach((r) => {
          const referenciaDiv = document.createElement("div");
          referenciaDiv.classList.add(
            "referencia",
            "w-[900px]",
            "max-w-full",
            "border",
            "border-box-border",
            "bg-box-bg",
            "rounded-3xl",
            "ease-linear",
            "focus-within:bg-body",
            "focus-within:border-primary",
            "p-6",
            "pr-16",
            "relative"
          );

          referenciaDiv.innerHTML = `
                <h3 class="font-semibold overflow-auto font-normal dark:font-semibold sm:overflow-hidden"><strong class="text-transparent bg-clip-text bg-gradient-to-br from-indigo-600 from-20% via-primary via-30% to-green-600">Referencia: </strong>${r.cita}</h3>
                <br/>
                <p><strong class="text-transparent bg-clip-text bg-gradient-to-br from-indigo-600 from-20% via-primary via-30% to-green-600">Formato:</strong> ${r.formatFullname} (${r.format})</p>
                <p class="overflow-auto sm:overflow-hidden"><strong class="text-transparent bg-clip-text bg-gradient-to-br from-indigo-600 from-20% via-primary via-30% to-green-600">URL: </strong>${r.url}</p>
            `;

          $references.appendChild(referenciaDiv);
        });
      }

      const referenciaDivs = document.querySelectorAll(".referencia");
      let buttonId = 1;

      referenciaDivs.forEach((div) => {
        const h3 = div.querySelector("h3") as HTMLElement;
        const btn = document.createElement("button");
        btn.classList.add(
          "absolute",
          "right-6",
          "top-1/2",
          "transform",
          "-translate-y-1/2",
          "transition-all"
        );
        //   btn.textContent = "Copiar al Portapapeles";
        btn.id = `button-${buttonId}`;
        buttonId++;

        const copySvg = createSvg(
          "icon icon-tabler icon-tabler-copy",
          '<path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M8 8m0 2a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-8a2 2 0 0 1 -2 -2z"></path><path d="M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2"></path>'
        );

        const checkSvg = createSvg(
          "icon icon-tabler icon-tabler-check",
          '<path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M5 12l5 5l10 -10"></path>'
        );

        btn.appendChild(copySvg);

        let copied = false;

        function createSvg(className: string, svgPath: string) {
          const svg = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "svg"
          );
          svg.setAttribute("class", className);
          svg.setAttribute("width", "24");
          svg.setAttribute("height", "24");
          svg.setAttribute("viewBox", "0 0 24 24");
          svg.setAttribute("stroke-width", "2");
          svg.setAttribute("stroke", "currentColor");
          svg.setAttribute("fill", "none");
          svg.setAttribute("stroke-linecap", "round");
          svg.setAttribute("stroke-linejoin", "round");
          svg.innerHTML = svgPath;
          return svg;
        }

        btn.addEventListener("click", () => {
          if (!copied) {
            const tempTextArea = document.createElement("textarea");
            tempTextArea.value = h3.textContent || "";
            document.body.appendChild(tempTextArea);
            tempTextArea.select();
            document.execCommand("copy");
            document.body.removeChild(tempTextArea);
            // alert('¡Contenido copiado al portapapeles!');
            Toastify({
              text: "Referencia copiada",
              duration: 1000,
              close: true,
              gravity: "bottom", // `top` or `bottom`
              position: "right", // `left`, `center` or `right`
              stopOnFocus: true, // Prevents dismissing of toast on hover
              style: {
                background:
                  "linear-gradient(129deg, rgba(79,70,229,1) 40%, rgba(5,150,105,1) 100%)",
              },
            }).showToast();
            copied = true;
            btn.innerHTML = "";
            btn.appendChild(checkSvg);
            setTimeout(() => {
              copied = false;
              btn.innerHTML = "";
              btn.appendChild(copySvg);
            }, 1000);
          }
        });

        div.appendChild(btn);
      });
    }
  }

  async function onSubmit(e: any, url: string, format: string) {
    e.preventDefault();

    console.log(url, format);

    await fetch(`https://api.citeas.org/product/${url}`)
      .then((response) => response.json())
      .then((data) => {
        const matchingCitation = data.citations.find(
          (citation: any) => citation.style_shortname === format
        );
        if (matchingCitation) {
          console.log("Cita:", matchingCitation.citation);
          const newReference = {
            url: url,
            cita: matchingCitation.citation,
            format: matchingCitation.style_shortname,
            formatFullname: matchingCitation.style_fullname,
            time: new Date().toLocaleTimeString(),
            day: new Date().toLocaleDateString(),
          };
          const updatedReferences = [...references, newReference];
          localStorage.setItem("references", JSON.stringify(updatedReferences));
          const updatedReferencesFromStorage = JSON.parse(
            localStorage.getItem("references") || "[]"
          );
          references.length = 0;
          Array.prototype.push.apply(references, updatedReferencesFromStorage);
          renderReferences(); // Actualizar las referencias en el DOM
        } else {
          console.log("No se encontró una cita con el formato especificado.");
        }
      });
  }

  window.addEventListener("DOMContentLoaded", () => {
    renderReferences();
  });

  $("#sendURL")?.addEventListener("submit", (e) => {
    const urlInput = $("#url") as HTMLInputElement;
    const urlValue = urlInput.value;
    const formatInput = $("#format") as HTMLInputElement;
    const formatValue = formatInput.value;
    onSubmit(e, urlValue, formatValue);
  });

  // Llamada a la función para copiar al hacer clic en un botón, por ejemplo
  const copyButton = document.getElementById("copyButton") as HTMLButtonElement;
  const originalSvg = copyButton?.innerHTML;
  copyButton?.addEventListener("click", copyReferencesToClipboard);

  const checkSvg = `
  <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-check" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
   <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
   <path d="M5 12l5 5l10 -10"></path>
</svg>
`;

  function changeButtonContent(content: string) {
    copyButton.innerHTML = content;
  }

  // Copiar todas las referencias
  function copyReferencesToClipboard() {
    const referenciaDivs = document.querySelectorAll(".referencia");
    let textToCopy = "";

    referenciaDivs.forEach((div) => {
      const h3 = div.querySelector("h3");
      if (h3) {
        const textNodes = Array.from(h3.childNodes)
          .filter(
            (node) =>
              node.nodeType === Node.TEXT_NODE && node.nodeName !== "STRONG"
          )
          .map((node) => node.textContent?.trim())
          .join(" ");

        textToCopy += textNodes + "\n";
      }
    });

    if (textToCopy) {
      changeButtonContent(checkSvg);

      navigator.clipboard
        .writeText(textToCopy)
        .then(() => {
          Toastify({
            text: "Todas las Referencias copiadas",
            duration: 1000,
            close: true,
            gravity: "bottom", // `top` or `bottom`
            position: "right", // `left`, `center` or `right`
            stopOnFocus: true, // Prevents dismissing of toast on hover
            style: {
              background:
                "linear-gradient(129deg, rgba(79,70,229,1) 40%, rgba(5,150,105,1) 100%)",
            },
          }).showToast();

          setTimeout(() => {
            changeButtonContent(originalSvg); // Volver al contenido original del botón después de 1 segundo
          }, 1000);
        })
        .catch((error) => {
          console.error("Error al copiar al portapapeles:", error);
        });
    }
  }
</script>
